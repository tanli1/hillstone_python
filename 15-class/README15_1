练习15_1

练习目的
通过练习14，我们已经创建了一个类，并且了解了实例化一个类。接下来我们将为happy类增加更多的方法以实现丰富的功能
大厦总是一层一层盖起来的，对于一个对象，也是如此。

练习内容
让我们继续改造趣味练习——猜数字游戏

为happy类创建play()方法
修改getItem()方法，增加一个控制开关，来完成数字或者字符游戏
创建getInput方法用以接收输入的数字
创建一个finalPrint()方法，在结束的时候打印

代码片段
class Happy(object):
    def __init__(self, gameType):
        self.gameType = gameType
        self.element = getItem(gameType)

    def getItem(self, gameType='int'):
        # 随机生成一个数字或字符

    def play(self):
        while True:
            n = self.getInput()
            游戏逻辑

    def getInput(self):
        x = raw_input()
        return x

    def show(self):
        print self.element

    def finalPrint(self):
        打印相关内容

myhappy = Happy(gameType='int')
myhappy.play()

练习要求
None

相关知识

面向对象最重要的概念就是类（Class）和实例（Instance），必须牢记类是抽象的模板，而实例是根据类创建出来的一个个具体的“对象”，每个对象都拥有相同的方法，但各自的数据可能不同。


思考
当我们将一个事物抽象成一个对象的时候，常常会面临需要创建多少个方法的问题。
继续来思考一下这个游戏吧。为什么需要一个getInput方法呢？为什么不直接写入play中呢？
还可以抽象出哪些方法呢？比如对比输入的数和实际的数的方法。
