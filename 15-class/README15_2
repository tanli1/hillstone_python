练习15_2

练习目的
通过练习14和练习15_1，我们已经实现了猜数字游戏。
接下来，让我们通过一个新的游戏来练习类的继承，了解子类，父类

练习内容
请先思考一下一个游戏需要哪些方法？

输入
输出
玩儿
游戏说明

那么，我们可以先定义一个类Game()
代码片段
class Game(object):
    def __init__(self, gameName):
        self._status = False
        self.gameName = gameName

    def gameHelp(self):
        print "Welcome Play %s" self.gameName
        # print some help infomations

    def input(self, info):
        x = raw_input(info)
        # do some basic input check
        return x

    def output(self):
        if self._status:
            print "Congratulations"
        else:
            print "Game Over"

    def play(self):
        pass

接下来，让我们来基于Game类，创建Guess()，并重写一些方法
代码片段
class Guess(Game):
    def __init__(self, gameType):
        self.gameName = "Guess Number"
        super(Guess, self).__init__(self.gameName)
        self.gameType = gameType
        self.gameData = self.getItem()

    def getItem(self):
        if self.gameType == "int"

        else:

    def play(self):
        while True:
            x = self.input("pls input a Number...")
            if self.check(x):

            else:

    def check(self, x):
        # do check logic

那么再来写另外一个游戏，猜字符顺序，同样继承自Game类
代码片段
class Guessequence(Game):
    def __init__(self):
        self.gameName = "Guess the sequence"
        super(Guessequence, self).__init__()
        self.gameData = self.getItem()

    def getItem(self):
        # return a list like ['a','b','c']

    def play(self):
        while True:
            x = self.input("pls input your sequence")
            if self.check(x):

            else:

    def check(self, x):
        # do check logic


练习要求
None

相关知识

super()

描述


super() 函数是用于调用父类(超类)的一个方法。
super 是用来解决多重继承问题的，直接用类名调用父类方法在使用单继承的时候没问题，但是如果使用多继承，会涉及到查找顺序（MRO）、重复调用（钻石继承）等种种问题。
MRO 就是类的方法解析顺序表, 其实也就是继承父类方法时的顺序表。


语法

super(type[, object-or-type])

常用内置类属性


__dict__: 类的属性（包含一个字典，由类的数据属性组成）

__doc__: 类的文档字符串

__name__: 类名


方法重写
如果你的父类方法的功能不能满足你的需求，你可以在子类重写你父类的方法

下划线使用说明


__foo__: 定义的是特殊方法，一般是系统定义名字 ，类似 init() 之类的。

_foo: 以单下划线开头的表示的是 protected 类型的变量，即保护类型只能允许其本身与子类进行访问，不能用于 from module import *

__foo: 双下划线的表示的是私有类型(private)的变量, 只能是允许这个类本身进行访问了。


思考
当我们写完这些类之后，尝试在python的命令行方式初始化这些类，用dir()来看看每一个类的属性及方法。
如何获取属性的值？
如何调用方法？
同样，别忘了用type()来看看基类和子类
