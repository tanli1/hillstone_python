练习目的
python是一种面向对象的解释型计算机程序设计语言


接下来，将通过几次练习来了解：
1. 什么是对象
2. 什么是类
3. 什么是实例化
4. 理解什么时候需要用到类
5. 类的继承
6. 使用类的方法

其实在之前的练习中，就已经提到过，python中，一切皆对象。当使用dir()对一个变量，一个字符串，一个数字等等进行查看的时候，会得到类似这样的结果
>>> a=[1,2,3]
>>> dir(a)
['__add__', '__class__', '__contains__', '__delattr__', '__delitem__', '__delslice__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getslice__', '__gt__', '__hash__', '__iadd__', '__imul__', '__init__', '__iter__', '__le__', '__len__', '__lt__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__rmul__', '__setattr__', '__setitem__', '__setslice__', '__sizeof__', '__str__', '__subclasshook__', 'append', 'count', 'extend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort']
>>>
>>> dir('a')
['__add__', '__class__', '__contains__', '__delattr__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs__', '__getslice__', '__gt__', '__hash__', '__init__', '__le__', '__len__', '__lt__', '__mod__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__rmod__', '__rmul__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '_formatter_field_name_split', '_formatter_parser', 'capitalize', 'center', 'count', 'decode', 'encode', 'endswith', 'expandtabs', 'find', 'format', 'index', 'isalnum', 'isalpha', 'isdigit', 'islower', 'isspace', 'istitle', 'isupper', 'join', 'ljust', 'lower', 'lstrip', 'partition', 'replace', 'rfind', 'rindex', 'rjust', 'rpartition', 'rsplit', 'rstrip', 'split', 'splitlines', 'startswith', 'strip', 'swapcase', 'title', 'translate', 'upper', 'zfill']

在上面的示例中，分别用dir()查看了列表a和字符串'a'.

在查看列表a的时候，我们看到了曾经熟悉的方法，如pop(), append(), remove()等
在查看字符串'a'的时候，我们又看到了split(), startswith(), join(), upper(), strip()等常用的方法

当你不知道某个对象具有哪些方法时，使用dir()来查看吧



练习内容
我们将通过几次练习来使用类来改造趣味练习——猜数字游戏

1. 创建一个happy类
2. 为happy类创建getItem()方法，用以生成一个随机字符/数字
3. 为happy类创建show()方法，用以返回生成的随机字符/数字
4. 实例化该类，打印当前生成的数字

代码片段
class Happy(object):
    def __init__(self):
        self.element = getItem()

    def getItem(self):
        # 随机生成一个数字或字符

    def show(self):
        print self.element

myhappy = Happy()
myhappy.show()



练习要求
生成元素的时候，生成的元素可以是字符，也可以是数字

相关知识

面向对象最重要的概念就是类（Class）和实例（Instance），必须牢记类是抽象的模板，而实例是根据类创建出来的一个个具体的“对象”，每个对象都拥有相同的方法，但各自的数据可能不同。


类的定义

class后面紧接着是类名，类名通常是大写开头的单词
紧接着是(object)，表示该类是从哪个类继承下来的
通常，如果没有合适的继承类，就使用object类，这是所有类最终都会继承的类。



__init__()方法

在定义类的时候，如果添加了__init__方法，那么在创建类的实例的时候，会自动调用该方法

__init__方法一般用来对对实例的属性进行初始化
第一个参数永远都是self

当类的定义有__init__()方法时，在创建实例的时候，就不能传入空的参数了，必须传入与__init__方法匹配的参数，但self不需要传
